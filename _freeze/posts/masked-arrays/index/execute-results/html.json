{
  "hash": "7cbe72dbf8386ec3c1db87409e850545",
  "result": {
    "markdown": "---\ntitle: \"Why masked arrays are useful for data science. Part 1\"\nauthor: \"Carl Gaspar\"\ndate: \"2023-08-01\"\ncategories: [numpy, missing data, pairwise comparisons]\nimage: \"image.jpg\"\nnumber-sections: true\n---\n\nEver needed to compare lots of variables and struggled with missing data?\n\nA surprisingly wide range of measures that are core to data science can be accelerated with the use of matrix multiplication. You just need to get creative when reformulating your computation.\n\nBut real-world data has missing values and these can make matrix multiplication useless. Does that mean one must resort to inefficient for-loops to keep track of missing values?\n\nNo. Using Numpy masked arrays one can still reap the benefits of matrix multiplication whilst making full use of one's data.\n\nIn this post I cover:\n\n1.  What matrix multiplication (**MM**) is (@sec-matmul)\n2.  Percentage agreement the slow way (@sec-agreement)\n2.  Percentage agreement (and Cohen's kappa) the fast way (@sec-vectorization)\n3.  Why missing data are a problem for **MM** (@sec-curse)\n4.  Show that Numpy masked arrays solves this problem (@sec-masked-arrays)\n5.  Give some pointers on optimization (@sec-details)\n6.  The takeaway. Go to @sec-takeaway if you're impatient!\n\nThe **covariance matrix** is another measure we can efficiently compute using **MM** and masked arrays. I am leaving that for another post where I also describe existing solutions (**coming soon**).\n\nThe solution I describe here for efficient computation of **percentage agreement** (and **Cohen's kappa coefficient**) is not something in any major Python package.\n\nBut before we get to that, let's talk about **matrix multiplication** (**MM**).\n\n## Sums of products. Lots of them, fast {#sec-matmul}\n\nAs implemented in most popular packages like Python's Numpy, **MM** let's you rapidly calculate sums-of-products for many pairs of variables. So let's start with sums-of-products.\n\nHere is a single variable and it's sum-of-products:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nx = np.array([1, 2, 3])\nsum_of_products = (x**2).sum()\nprint(sum_of_products)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\nNow we consider another variable `y` and calculate the sum-of-products between `x` and `y`:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ny = np.array([3, 2, 1])\nproducts = np.multiply(x, y)\nsum_of_products = products.sum()\nprint(products)\nprint(sum_of_products)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3 4 3]\n10\n```\n:::\n:::\n\n\nNow we package our `x` and `y` as the column vectors of a single matrix:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nX = np.array([[1, 3],\n              [2, 2],\n              [3, 1]])\nnumber_observations, number_variables = X.shape\nprint(f\"{number_observations} observations (rows)\")\nprint(f\"{number_variables} variables (columns)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 observations (rows)\n2 variables (columns)\n```\n:::\n:::\n\n\nWhy did with do this? If you matrix multiply `X` with itself you get something interesting:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nS = np.dot(X.transpose(), X)\nprint(S)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[14 10]\n [10 14]]\n```\n:::\n:::\n\n\n`S[0,0]` is the sum-of-products of `x` with itself. `S[0,1]` is the sum-of-products of `x` with `y`. `S[1,0]` is also the sum-of-products of `x` with `y`. And `S[1,1]` is the sum-of-products of `y` with itself.\n\nIn other words, matrix multiplication (**MM**) gives you the sum-of-products for every pairwise comparison.\n\nAnd as mentioned earlier, **MM** is computed very quickly using packages like Numpy.\n\nBut why do we care about sums-of-products for every pairwise comparison?\n\nSo many interesting measures/statistics can be reformulated as an efficient sequence of **MM**.\n\nSo with just a little bit of cleverness you can turn your very inefficient for-loops into a very efficient sequence of matrix operations.\n\n## Percentage agreement the slow way {#sec-agreement}\n\nImagine that 8 people filled out a survey consisting of 4 yes/no items:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\nX = np.array([[0, 0, 0, 0, 1, 1, 1, 1],\n              [0, 0, 0, 0, 1, 1, 1, 1],\n              [0, 1, 0, 1, 0, 1, 0, 1],\n              [1, 1, 1, 1, 0, 0, 0, 0]]).transpose()\n\ncol_labels = ['Item ' + str(i) for i in range(1,5)]\nrow_labels = ['Person ' + str(i) for i in range(1,9)]\nprint(pd.DataFrame(X, columns=col_labels, index=row_labels))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Item 1  Item 2  Item 3  Item 4\nPerson 1       0       0       0       1\nPerson 2       0       0       1       1\nPerson 3       0       0       0       1\nPerson 4       0       0       1       1\nPerson 5       1       1       0       0\nPerson 6       1       1       1       0\nPerson 7       1       1       0       0\nPerson 8       1       1       1       0\n```\n:::\n:::\n\n\nYou want to know if there are associations among these items.\n\nA glance at this stylized data set suffices.\n\nItem 1 is perfectly positively associated with item 2 in this sample; 100 percent of the responses are in agreement.\n\nItem 1 is has no association with item 3 in this sample; guessing someone's response to item 3 based their response to 1 is no better than a coin flip (50 percent).\n\nItem 1 is perfectly negatively associated with item 4; 0 percent of the responses are in agreement.\n\nIf you have a much larger data set, you might decide to use for-loops like this:\n\n***NOTE TO SELF***\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n#def pa_loop(X):         # ðŸš€\n#def pa_loop_t(X):\n#def pa_vect(X):         # ðŸš€\n#def pa_loop_missing(X): # ðŸš€\n#def pa_vect_missing(X): # ðŸš€\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef pa_loop(X): # ðŸš€\n    number_samples, number_variables = X.shape\n    percent_agreement = np.zeros((number_variables, number_variables))\n    for item_a in range(number_variables):\n        for item_b in range(item_a+1, number_variables):\n            percent_agreement[item_a, item_b] = (X[:, item_a]==X[:, item_b]).sum()\n    percent_agreement /= number_samples\n    return(percent_agreement)\n```\n:::\n\n\nBut this can be slow for large data sets:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfrom time import perf_counter\nnumber_samples, number_variables = 1000, 1000\nX = np.random.choice([0., 1.], size=(number_samples, number_variables), replace=True)\ntic = perf_counter()\npercent_agreement = pa_loop(X)\ntoc = perf_counter()\nprint(f\"Computing all pairwise percentage agreements took {toc-tic:0.4f} seconds.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nComputing all pairwise percentage agreements took 3.2916 seconds.\n```\n:::\n:::\n\n\nThis may not seem so bad. But consider that\n\n1. Things will be much worse when missing data are considered (@sec-curse).\n2. Data exploration might mean iterating this code many times.\n3. **Percentage agreement** is simpler than some other measures/statistics.\n\nHow can we use matrix multiplication to speed things up? We'll have to use some tricks but it's not that hard.\n\n## Percentage agreement the fast way {#sec-vectorization}\n\nHere is a simple case with yes and no responses for 2 items coded as 1s and 0s respectively:\n\n| item 1 | item 2 | agreement | yes-yes | no-no |\n|:------:|:------:|:---------:|:-------:|:-----:|\n|    0   |    0   |     1     |    0    |   1   |\n|    0   |    1   |     0     |    0    |   0   |\n|    1   |    0   |     0     |    0    |   0   |\n|    1   |    1   |     1     |    1    |   0   |\n\nWhat we want is a column like *agreement* above whose sum (`2`) gives us the number of agreements. We then divide 2 by 4 to get 50-percent agreement.\n\nTreating **item 1** as a row vector and **item 2** as a column vector, we can perform matrix multiplication to get the sum of **yes-yes** (`1`). As an intermediate step in matrix multiplication, our 2 vectors are multiplied value-by-value giving us the yes-yes column above. Summing is the final step of matrix multiplication (`1`). \n\nAgreements can be either **yes-yes** or **no-no** so we still need to obtain that sum before we can measure number of agreements. That's easy. We simply flip the values in **item 1** and **item 2** from 0 to 1, and 1 to 0:\n\n$$\nnew = \\lvert old-1 \\rvert\n$$\n\nMatrix multiplication of these complementary vectors for **item 1** and **item 2** (not shown here) gives us our sum of **no-no**, whose intermediate step is the **no-no** column above.\n\nThe above example is for 2 items but the power of matrix multiplication is that we are multiplying **matrices** -- as many items as we want. And the result is a matrix of all pairwise comparisons. In other words, we can obtain a matrix of percentage agreement for all pairwise comparisons using a simple sequence of matrix-based operations, like this:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndef pa_vect(X):\n    number_samples, number_variables = X.shape # (n x k)\n    yesYes = np.dot(X.transpose(), X)          # counts of yes-yes (k x k)\n    np.abs(X-1, out=X)                         # [0,1] -> [1,0]\n    noNo = np.dot(X.transpose(), X)            # counts of no-no   (k x k)\n    S = yesYes + noNo                          # counts of agreements (k x k)\n    A = S / number_samples                     # percentage agreements (k x k)   \n    return(A)\n```\n:::\n\n\nHow much faster is this compared to the loop-based computation?\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nnumber_samples = 1000\nnumber_variables = [10, 50, 100, 500, 1000]\nseconds = np.zeros((len(number_variables), 2))\nfor i, nvl in enumerate(number_variables):\n    X = np.random.choice([0., 1.], size=(number_samples, nvl), replace=True)\n    tic = perf_counter(); percent_agreement = pa_loop(X); toc = perf_counter()\n    seconds_loop = toc-tic\n    tic = perf_counter(); percent_agreement = pa_vect(X); toc = perf_counter()\n    seconds_vect = toc-tic\n    seconds[i, 0] = seconds_loop\n    seconds[i, 1] = seconds_vect\n    \ndf = pd.DataFrame(seconds, \n                  columns=['loop','matrix-based'],\n                  index=number_variables)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>loop</th>\n      <th>matrix-based</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10</th>\n      <td>0.000851</td>\n      <td>0.003188</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>0.012009</td>\n      <td>0.005438</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>0.057433</td>\n      <td>0.003524</td>\n    </tr>\n    <tr>\n      <th>500</th>\n      <td>0.845797</td>\n      <td>0.057247</td>\n    </tr>\n    <tr>\n      <th>1000</th>\n      <td>3.122708</td>\n      <td>0.060030</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's examine the speed up graphically:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\ndf.plot(loglog=True, xlabel=\"Number of variables\", ylabel=\"Seconds\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=599 height=431}\n:::\n:::\n\n\nMatrix-based computation is definitely faster!\n\nHow much faster exactly? \n\nDividing the time taken by loop-based computation by the time taken by matrix-based computation gives us a speed-up. The larger the number the stronger the advantage for matrix-based computation:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nspeed_up = seconds[:,0] / seconds[:,1]\nplt.semilogx(number_variables, speed_up)\nplt.xlabel(\"Number of variables\")\nplt.ylabel(\"Speed advantage\")\nplt.title(\"Matrix-based operation beats loops by miles\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.png){width=585 height=451}\n:::\n:::\n\n\n## The curse of missing data {#sec-curse}\n\n## Masked arrays to the rescue {#sec-masked-arrays}\n\n## Nasty details for those interested {#sec-details}\n\n## Conclusion {#sec-takeaway}\n\nIf you need to compute a measure/statistic for all pairwise comparisons among a large set of variables, then you can probably speed things up a lot with matrix multiplications. It may take some creativity, but this hopefully this blog post can provide some inspiration.\n\nIf you also have missing data, then you can use matrix multiplications to obtain even more gains in efficiency! Simply use Numpy masked arrays.\n\nIf you do decide to try out a similar solution for your measure/statistic, pay heed to @sec-details. And watch out for [Jax](https://jax.readthedocs.io/en/latest/index.html). While it currently does not support **masked arrays**, perhaps it or some external package using Jax will do so in the future. That could be very useful.\n\nThe solution I present here for **percentage agreement** and **Cohen's kappa** is not currently implemented in any major Python package. I do not think that my solution would be useful for [scikit-learn](https://scikit-learn.org/stable/index.html), as Cohen's kappa is primarily used here for model comparison with ground-truth labels. Unless you wanted to obtain a detailed picture of categorization errors among hundreds of thousands of models ... However, it might have a place in some other package.\n\nFinally, watch out for my next post on how missing data are dealt with by current solutions that measure the **covariance matrix**, and why that matters.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}